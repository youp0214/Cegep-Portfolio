package modele;

import java.awt.Point;
import java.util.Set;

import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.scene.paint.Color;
import mouvement.Deplacement;

public abstract class Particule {

	private Color couleur;
	private double angleDep, rayon;
	private double[] vitesse;
	private double modVitesse;
	private DoubleProperty positionX, positionY;
	private Deplacement mouvement;
	private Point zoneDep;
	Set<Particule> environementPart;

	public Particule(Point pPos, double pVitesse, double pAngleDep, double pRayon, Color pCouleur, Point pZone,
			Set<Particule> pEnvironementPart) {
		positionX = new SimpleDoubleProperty();
		positionY = new SimpleDoubleProperty();
		vitesse = new double[2];
		environementPart = pEnvironementPart;

		setPosition(pPos);
		setAngleDep(pAngleDep);
		setVitesse(pVitesse);
		setRayon(pRayon);
		setCouleur(pCouleur);
		setZoneDep(pZone);
		setVecVitesse();

		mouvement = new Deplacement(this, environementPart);
		Thread t = new Thread(mouvement);
		t.setDaemon(true);
		t.start();
	}

	private double calculerAngle() {
		return (double) Math.toDegrees(Math.asin(getVitesse()[1] / getVitesse()[0]));
	}

//	 référence pour l'algorythme https://en.wikipedia.org/wiki/Elastic_collision
	private double[] calculerVitesse(Particule pPart) {
		double[] f = {
				(((getRayon() - pPart.getRayon()) / (getRayon() + pPart.getRayon()))
						* (float) ((Math.cos(getAngleDep()) * getModuleVitesse())
								- (Math.cos(pPart.getAngleDep()) * pPart.getModuleVitesse()))
						+ (((2 * pPart.getRayon()) / (getRayon() + pPart.getRayon())
								* ((float) (Math.cos(pPart.getAngleDep()) * getModuleVitesse()))))),
				(((getRayon() - pPart.getRayon()) / (getRayon() + pPart.getRayon()))
						* ((float) (Math.sin(getAngleDep()) * getModuleVitesse()) + (((2 * pPart.getRayon())
								/ (getRayon() + pPart.getRayon()) * ((Math.sin(getAngleDep()) * getModuleVitesse())
										- (Math.sin(pPart.getAngleDep()) * pPart.getModuleVitesse())))))) };
		return f;
	}

	public Point getZoneDep() {
		return zoneDep;
	}

	public void setZoneDep(Point zoneDep) {
		if (zoneDep != null)
			this.zoneDep = zoneDep;
	}

	public Color getCouleur() {
		return couleur;
	}

	public void setCouleur(Color pCouleur) {
		couleur = pCouleur;
	}

	public double[] getVitesse() {
		return vitesse;
	}

	public double getModuleVitesse() {
		return (double) Math.sqrt(Math.pow((double) vitesse[0], 2) + Math.pow((double) vitesse[1], 2));
	}

	public void setVitesse(double pVitesse) {
		modVitesse = pVitesse;
	}

	public void setVecVitesse() {
		vitesse[0] = Math.cos(Math.toRadians(angleDep)) * modVitesse;
		vitesse[1] = Math.sin(Math.toRadians(angleDep)) * modVitesse;
	}

	public void setVecVitesse(double pVitesse[]) {
		vitesse[0] = pVitesse[0];
		vitesse[1] = pVitesse[1];
	}

	public double getAngleDep() {
		return angleDep;
	}

	public void setAngleDep(double pAngleDep) {
		angleDep = pAngleDep;
	}

	public double getRayon() {
		return rayon;
	}

	public void setRayon(double pRayon) {
		rayon = pRayon;
	}

	public DoubleProperty getPosX() {
		return positionX;
	}

	public DoubleProperty getPosY() {
		return positionY;
	}

	public void setPosition(Point pPosition) {
		if (pPosition != null) {
			positionX.setValue(pPosition.getX());
			positionY.setValue(pPosition.getY());
		}

	}

	// TODO
	public void rebond(Particule pPart) {
		// setVitesse(calculerVitesse(pPart));
		// setAngleDep(calculerAngle());
		vitesse[1] *= -1;
	}

	public void collisionMur(boolean[] pasMur, double[] newVitesse) {
		if (pasMur[0]) {
			newVitesse[1] *= -1;
			setVecVitesse(newVitesse);
		} else {
			newVitesse[0] *= -1;
			setVecVitesse(newVitesse);
		}
	}

	public abstract void handleCollision(Particule pPart);
}
