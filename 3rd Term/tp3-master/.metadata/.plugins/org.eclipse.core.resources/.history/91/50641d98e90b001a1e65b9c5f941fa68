package mouvement;

import java.awt.Point;
import java.util.ArrayList;
import java.util.Set;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Point2D;
import javafx.util.Duration;
import modele.Particule;
import modele.RegroupementParticules;

public class Deplacement extends Task<Void> {

	private Particule particule;
	private static final int NBR_RAFRAICHISSEMENTS = 5;
	private Point pointTemp;
	private RegroupementParticules environementPart;
	private boolean willDie = false;

	public Deplacement(Particule pParticule, RegroupementParticules pEnvironementPart) {
		particule = pParticule;
		environementPart = pEnvironementPart;
	}

	private boolean[] verifierMur() {
		boolean[] estBonDep = { true, true };
		if (pointTemp.getX() + 2 >= particule.getZoneDep().getX() - particule.getRayon().getValue()
				|| pointTemp.getX() - particule.getRayon().getValue() <= 0)
			estBonDep[0] = false;

		if (pointTemp.getY() + 2 >= particule.getZoneDep().getY() - particule.getRayon().getValue()
				|| pointTemp.getY() - particule.getRayon().getValue() <= 0)
			estBonDep[1] = false;

		return estBonDep;
	}

	private Particule verifierAutrePart() {
		Particule temp = null;
		if (environementPart != null && environementPart.getListParticules().size() > 0)
			for (Particule part : environementPart.getListParticules()) {
				if (!part.equals(particule)) {
					double minDistance = (particule.getRayon().getValue() + part.getRayon().getValue());
					Point2D temp2Dthis = new Point2D(particule.getPosition().getX() + particule.getVitesse()[0],
							particule.getPosition().getY() - particule.getVitesse()[1]);
					Point2D temp2Dthat = new Point2D(part.getPosition().getX() + part.getVitesse()[0],
							part.getPosition().getY() - part.getVitesse()[1]);

					if (temp2Dthis.distance(temp2Dthat) < minDistance + 2) {
						temp = part;
						break;
					}
				}
			}

		return temp;
	}

	private void deplacer() {
		pointTemp = new Point();

		pointTemp.setLocation(particule.getPosX().getValue() + particule.getVitesse()[0],
				particule.getPosY().getValue() - particule.getVitesse()[1]);

		boolean[] pasMur = verifierMur();

		Particule colliPart = verifierAutrePart();

		double[] newVitesse = { particule.getVitesse()[0], particule.getVitesse()[1] };
		if (!pasMur[0] || !pasMur[1]) {
			particule.collisionMur(pasMur, newVitesse);
		} else if (colliPart != null) {
			particule.handleCollision(colliPart);
		} else {
			particule.setPosition(pointTemp);

		}
	}

	public void die() {
		willDie = true;
	}

	@Override
	protected Void call() throws Exception {
		final Timeline loop = new Timeline(
				new KeyFrame(Duration.millis(NBR_RAFRAICHISSEMENTS), new EventHandler<ActionEvent>() {

					@Overr
					public void handle(ActionEvent event) {
						if (willDie)
							return;
						deplacer();

					}

				}));
		loop.setCycleCount(Timeline.INDEFINITE);
		loop.play();

		return null;
	}

}
