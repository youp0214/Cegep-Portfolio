package ctrl;

import java.awt.Point;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.scene.paint.Color;
import javafx.scene.shape.Shape;
import modele.Mangeuse;
import modele.Particule;
import modele.Rebondissante;
import musique.BoomBox;
import vue.Collision_Vue;

public class Ctrl {

	public static final int NBR_PART_MAX = 300;
	private Hashtable<Particule, Shape> lienParticules;
	private ArrayList<Particule> listParticules;
	private Data data;
	private Collision_Vue vue;
	private SimpleIntegerProperty nbrePart_Property;

	// dimension du Pane
	private Point dimensionBoite;
	private BoomBox musique;

	public Ctrl() throws Exception {
		data = new Data();
		listParticules = new ArrayList<>();
		lienParticules = new Hashtable<>();
		vue = new Collision_Vue(this);

		// utiliser plus tard pour la verfier les colisions avec les parois
		dimensionBoite = new Point();
		dimensionBoite.setLocation(vue.getBoite().getPrefWidth(), vue.getBoite().getPrefHeight());
		dimensionBoite.setLocation(vue.getBoite().getPrefWidth(), vue.getBoite().getPrefHeight());

		nbrePart_Property = new SimpleIntegerProperty(0);

		genLabelBindings();
		genDataBindings();
	}

	/**
	 * modifie l'afficheur de nbre de particule selon le nombre d'objets dans la
	 * liste de particule
	 */
	private void updateNbrPart() {
		nbrePart_Property.set(lienParticules.size());
	}

	public void setDataCouleur() {
		data.setCouleur(vue.getCouleur_CP().getValue());
	}

	public void setEffet(boolean estCoche) {
		for (Particule Shape : lienParticules) {

		}
	}

	public void gogoMusique() {
		musique = new BoomBox();
		Thread t = new Thread(musique);
		t.setDaemon(true);
		t.start();
	}

	public void setVolume(double pVolume) {
		musique.setVolume(pVolume);
	}

	public void clickMute() {
		try {
			musique.mute();
		} catch (Exception e) {

		}
	}

	/**
	 * lie les attributs du data au valeurs des sliders
	 */
	private void genDataBindings() {
		data.getAngle().bind(vue.getAngle_Slr().valueProperty());
		data.getRayon().bind(vue.getRayon_Slr().valueProperty());
		data.getVitesse().bind(vue.getVitesse_Slr().valueProperty());

		// set a true si rebondissante et a false si mangeuse est selectionnee
		data.isEstRebond().bind(vue.getRebond_RB().selectedProperty());

	}

	/**
	 * lie les sliders avec leur label respectif
	 */
	private void genLabelBindings() {
		// bind le Label du rayon et son slider
		vue.getRayon_L().textProperty().bind(vue.getRayon_Slr().valueProperty().asString("%4.1f"));
		// bind le Label de l'angle et son slider
		vue.getAngle_L().textProperty().bind(vue.getAngle_Slr().valueProperty().asString("%4.1f"));
		// bind le Label de la vitesse et son slider
		vue.getVitesse_L().textProperty().bind(vue.getVitesse_Slr().valueProperty().asString("%4.1f"));

		vue.getVolume_L().textProperty().bind(vue.getMusique_Slr().valueProperty().multiply(100).asString("%1.1f"));

		vue.getNbrPart_L().textProperty().bind(nbrePart_Property.asString());
	}

	public void changeVolume() {
		setVolume(vue.getMusique_Slr().valueProperty().multiply(100).doubleValue());
	}

	public List<Particule> getListParticules() {
		return listParticules;
	}

	public void genPart(Point position) {
		if (data.isEstRebond().getValue())
			ajouterPart(new Rebondissante(position, data.getVitesse().getValue(), data.getAngle().getValue(),
					data.getRayon().getValue(), data.getCouleur(), dimensionBoite, lienParticules.keySet()));
		else
			ajouterPart(new Mangeuse(position, data.getVitesse().getValue(), data.getAngle().getValue(),
					data.getRayon().getValue(), data.getCouleur(), dimensionBoite, lienParticules.keySet()));

		// change le nbre
		updateNbrPart();
	}

	public void reiniPart() {
		lienParticules.clear();
		listParticules.clear();
		vue.getBoite().getChildren().clear();
		updateNbrPart();
	}

	public void ajouterPart(Particule pPart) {
		listParticules.add(0, pPart);
		Point pointTemp = new Point();
		pointTemp.setLocation(pPart.getPosX().getValue(), pPart.getPosY().getValue());
		lienParticules.put(pPart, vue.addShape());
	}

	public void enleverPart(Particule pPart) {
		vue.getBoite().getChildren().remove(lienParticules.get(pPart));
		lienParticules.remove(pPart);
		listParticules.remove(pPart);
	}

	public void genererRandPart(int nbr, boolean estRebond) {
		double vit, ang, ray;
		Point pos;
		Color col;
		if (vue.getNbrRand() <= NBR_PART_MAX)
			for (int i = 0; i < nbr; i++) {
				// g�n�re au hasard des valeurs compris dans l'ensemble des
				// valeurs
				// des slider
				vit = getRandDouble(vue.getVitesse_Slr().getMin(), vue.getVitesse_Slr().getMax());
				ang = getRandDouble(vue.getAngle_Slr().getMin(), vue.getAngle_Slr().getMax());
				ray = getRandDouble(vue.getRayon_Slr().getMin(), vue.getRayon_Slr().getMax());
				col = new Color(getRandDouble(0, 1), getRandDouble(0, 1), getRandDouble(0, 1), 1);

				pos = new Point();
				pos.setLocation(getRandDouble(ray, dimensionBoite.getX() - ray),
						getRandDouble(ray, dimensionBoite.getY() - ray));
				if (estRebond)
					ajouterPart(new Rebondissante(pos, vit, ang, ray, col, dimensionBoite, lienParticules.keySet()));
				else
					ajouterPart(new Mangeuse(pos, vit, ang, ray, col, dimensionBoite, lienParticules.keySet()));
				updateNbrPart();
			}
	}

	public static int getRandInt(int min, int max) {
		return (int) ((Math.random() * (max - min)) + min);
	}

	public static double getRandDouble(double min, double max) {
		return (Math.random() * (max - min)) + min;
	}

	public Collision_Vue getVue() {
		return vue;
	}
}
