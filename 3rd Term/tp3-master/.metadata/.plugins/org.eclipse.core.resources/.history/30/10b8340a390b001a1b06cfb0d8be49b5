package musique;

import java.io.File;
import java.util.ArrayList;

import ctrl.Data;
import javafx.concurrent.Task;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;

/**
 * Classe qui gère la sélection de la musique et la fait jouer
 * 
 * @author Nicolas Boulet et Yannick André Ouamba
 *
 */
public class BoomBox extends Task<Void> {

	/**
	 * MediaView, Attribut servant à gérer quelle musique joue
	 */
	private MediaView mediaView;
	/**
	 * MediaPLayer, Attribut qui représente le fichier musical en train de jouer
	 */
	private MediaPlayer monTropGrandWalkMan;
	/**
	 * FileChooser, Attribut qui représente le FileChooser pour aller chercher la
	 * musique
	 */
	private FileChooser checkMoiCaLaPlaylist;
	/**
	 * ArrayList de File, Attribut servant à entreposer tous les fichiers musicaux
	 * du dossier selectionné
	 */
	private ArrayList<File> playlist;
	/**
	 * Attributs concernant le volume, soit le volume entreposé lors d'une action de
	 * sourdine et le volume actuel du fichier musical
	 */
	private double volumeSauvegarde, currentVolume;

	/**
	 * Constructeur
	 * 
	 * Permet à l'utilisateur de choisir la musique qu'il veut faire jouer et place
	 * les fichiers trouvés dans la playlist. Se prépare à jouer la musique.
	 * 
	 * @param pVolume Le volume initial
	 */
	public BoomBox(double pVolume) {
//		data = pData;
		currentVolume = pVolume;
		getDirectory();
		rentreMoiDontTaCassette();
	}

	/**
	 * Commence la lecture de la musique
	 */
	public void play() {
		mediaView = new MediaView();
		mediaView.setMediaPlayer(monTropGrandWalkMan);
		mediaView.getMediaPlayer().setVolume(currentVolume);
		mediaView.getMediaPlayer().play();
	}

	/**
	 * Ajuste le volume selon le paramètre. Reçoit une valeur de volume entre 0 et
	 * 1.
	 * 
	 * @param volume Le volume voulu
	 */
	public void setVolume(double volume) {
		if (volume >= 0 && volume <= 1 && mediaView != null) {
			currentVolume = volume;
			mediaView.getMediaPlayer().setVolume(currentVolume);

//			monTropGrandWalkMan.setVolume(volume / 100);
		}
	}

	/**
	 * 
	 * @return Le MediaView actuellement en train de jouer
	 */
	public MediaView getMediaView() {
		return mediaView;
	}

	/**
	 * 
	 * @return Le volume actuel
	 */
	public double getCurrentVolume() {
		return currentVolume;
	}

	/**
	 * Garde le volume actuel en mémoire et le change pour le mettre à 0. Si ce
	 * dernier est égal à 0, il remet le volume actuel au niveau du volume
	 * sauvegardé
	 */
	public void mute() {
		if (volumeSauvegarde == 0) {
			volumeSauvegarde = currentVolume;
			setVolume(0);
		} else {
			setVolume(volumeSauvegarde);
			volumeSauvegarde = 0;
		}
	}

	/**
	 * Initie l'action de placer les chansons dans l'ordre et de faire
	 * l'enchainement entre les chansons
	 */
	private void rentreMoiDontTaCassette() {
		if (playlist != null)
			for (int i = 0; i < playlist.size(); i++) {
				MediaPlayer player = new MediaPlayer(new Media(playlist.get(i).toURI().toString()));
				MediaPlayer nextPlayer = new MediaPlayer(
						new Media(playlist.get((i + 1) % playlist.size()).toURI().toString()));
				if (i == 0)
					monTropGrandWalkMan = player;
				player.setOnEndOfMedia(new Runnable() {

					@Override
					public void run() {
						mediaView.setMediaPlayer(nextPlayer);
						nextPlayer.play();
					}
				});
			}
	}

	/**
	 * Crée la playlist à partir du dossier parent au fichier choisi.
	 * 
	 * @param directory le fichier choisi
	 */
	private void creerPlaylist(File directory) {
		if (directory != null) {
			playlist = new ArrayList<File>();
			File[] binDeTri;

			playlist.add(directory);
			binDeTri = directory.getParentFile().listFiles();
			for (int i = 0; i < binDeTri.length; i++) {
				if (!binDeTri[i].equals(playlist.get(0))
						&& (binDeTri[i].getName().endsWith(".wav") || binDeTri[i].getName().endsWith(".mp3"))) {
					playlist.add(binDeTri[i]);
				}
			}
		}
	}

	/**
	 * Permet la selection du fichier musical et appele la création de la playlist
	 */
	private void getDirectory() {
		checkMoiCaLaPlaylist = new FileChooser();
		checkMoiCaLaPlaylist.getExtensionFilters().add(new ExtensionFilter("Music files(*.mp3)", "*.mp3", "*.wav"));
		File dir = checkMoiCaLaPlaylist.showOpenDialog(null);
		creerPlaylist(dir);
	}

	@Override
	protected Void call() throws Exception {
		if (monTropGrandWalkMan != null)
			play();
		return null;
	}

}
