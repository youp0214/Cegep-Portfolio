package mouvement;

import java.awt.Point;
import java.util.Set;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.util.Duration;
import modele.Particule;

public class Deplacement extends Task<Void> {

	private Particule particule;
	private static final int NBR_RAFRAICHISSEMENTS = 5;
	private Point pointTemp;
	Set<Particule> environementPart;

	public Deplacement(Particule pParticule, Set<Particule> pEnvironementPart) {
		particule = pParticule;
		environementPart = pEnvironementPart;
	}

	private boolean[] verifierMur() {
		boolean[] estBonDep = { true, true };
		if (pointTemp.getX() >= particule.getZoneDep().getX() - particule.getRayon()
				|| pointTemp.getX() - particule.getRayon() <= 0)
			estBonDep[0] = false;

		if (pointTemp.getY() >= particule.getZoneDep().getY() - particule.getRayon()
				|| pointTemp.getY() - particule.getRayon() <= 0)
			estBonDep[1] = false;

		return estBonDep;
	}

	private Particule verifierAutrePart() {
		Particule temp = null;

		if (environementPart != null && environementPart.size() > 0)
			for (Particule part : environementPart) {

				if (!part.equals(particule)) {
					double minDistance = (particule.getRayon() + part.getRayon());

					if (particule.getPosition().distance(part.getPosition()) <= minDistance + 2) {
						temp = part;
						break;
					}
				}
			}

		return temp;
	}

	private Particule collision() {
		boolean[] pasMur = new boolean[2];
		Particule temp = null;
		for (Particule part : environementPart) {
			if (!(pasMur = verifierMur())[0] || !(pasMur = verifierMur())[1]) {
				particule.collisionMur(pasMur, particule.getVitesse());
			}
			if ((temp = verifierAutrePart()) != null) {
//				part.handleCollision(temp);
				System.out.println(temp.getVitesse()[0] + ", " + temp.getVitesse()[1]);
			}
		}
		return temp;
	}

	private void deplacer() {
		pointTemp = new Point();

		pointTemp.setLocation(particule.getPosX().getValue() + particule.getVitesse()[0],
				particule.getPosY().getValue() - particule.getVitesse()[1]);

		Particule temp;
		if ((temp = collision()) != null) {
			particule.handleCollision(temp);
		}
//
//		boolean[] pasMur = verifierMur();
//		Particule colliPart = verifierAutrePart();
//
//		double[] newVitesse = { particule.getVitesse()[0], particule.getVitesse()[1] };
//
//		if (!pasMur[0] || !pasMur[1])
//			particule.collisionMur(pasMur, newVitesse);
//		else if (colliPart != null)
//			particule.handleCollision(colliPart);
//		else
//			particule.setPosition(pointTemp);
	}

	@Override
	protected Void call() throws Exception {
		final Timeline loop = new Timeline(
				new KeyFrame(Duration.millis(NBR_RAFRAICHISSEMENTS), new EventHandler<ActionEvent>() {

					@Override
					public void handle(ActionEvent event) {
						deplacer();

					}

				}));
		loop.setCycleCount(Timeline.INDEFINITE);
		loop.play();

		return null;
	}
}
