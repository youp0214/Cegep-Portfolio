package modele;

import java.awt.Point;
import java.util.Set;

import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.geometry.Point2D;
import javafx.scene.paint.Color;
import mouvement.Deplacement;

public abstract class Particule {

	private Color couleur;
	private double angleDep, rayon;
	private double[] vitesse;
	private double modVitesse;
	private DoubleProperty positionX, positionY;
	private Point2D position;
	private Deplacement mouvement;
	private Point zoneDep;
	Set<Particule> environementPart;

	public Particule(Point pPos, double pVitesse, double pAngleDep, double pRayon, Color pCouleur, Point pZone,
			Set<Particule> pEnvironementPart) {

		environementPart = pEnvironementPart;

		positionX = new SimpleDoubleProperty();
		positionY = new SimpleDoubleProperty();

		vitesse = new double[2];

		setPosition(pPos);
		setAngleDep(pAngleDep);
		setVitesse(pVitesse);
		setRayon(pRayon);
		setCouleur(pCouleur);
		setZoneDep(pZone);
		setVecVitesse();

		mouvement = new Deplacement(this, environementPart);
		Thread t = new Thread(mouvement);
		t.setDaemon(true);
		t.start();
	}

	public Point getZoneDep() {
		return zoneDep;
	}

	public Point2D getPosition() {
		position = new Point2D(getPosX().doubleValue(), getPosY().doubleValue());
		return position;
	}

	private double calculerAngle(Point2D point) {
		return getPosition().angle(point);
	}

	private double calculerAngle1D(Particule pPart, double pAngle) {
		return pPart.
	}

	// référence pour l'algorythme
	// https://en.wikipedia.org/wiki/Elastic_collision
	private double[] calculerVitesse(Particule pPart) {

		double diffVitesseX = this.getVitesse()[0] - pPart.getVitesse()[0];
		double diffVitesseY = this.getVitesse()[1] - pPart.getVitesse()[1];

		double diffDistanceX = this.getPosition().getX() - pPart.getPosition().getX();
		double diffDistanceY = this.getPosition().getY() - pPart.getPosition().getY();

		double angleRot1D = Math.atan2(diffDistanceX, diffDistanceY);

		double vitesseInitThis = calculerAngle1D(this, angleRot1D);
		double vitesseInitPart = calculerAngle1D(pPart, angleRot1D);

		double vitesseFinThis = { 0, 0 };
		double vitesseFinPart = { 0, 0 };

		double rayonDiff = getRayon() - pPart.getRayon();
		double phi = Math.toRadians(calculerAngle(pPart.getPosition()));
		// difference d'angle avec l'angle de collision
		double anglesDiff1 = Math.toRadians(getAngleDep()) - phi;
		double anglesDiff2 = Math.toRadians(pPart.getAngleDep()) - phi;

		double newVitesseX = ((((getModuleVitesse() * Math.cos(anglesDiff1) * rayonDiff)
				+ 2 * pPart.getRayon() * pPart.getModuleVitesse() * Math.cos(anglesDiff2))
				/ (getRayon() + pPart.getRayon())) * Math.cos(phi))
				+ (getModuleVitesse() * Math.sin(anglesDiff1) * Math.cos((phi + (Math.PI / 2))));

		double newVitesseY = ((((getModuleVitesse() * Math.cos(anglesDiff1) * rayonDiff)
				+ 2 * pPart.getRayon() * pPart.getModuleVitesse() * Math.cos(anglesDiff2))
				/ (getRayon() + pPart.getRayon())) * Math.sin(phi))
				+ (getModuleVitesse() * Math.sin(anglesDiff1) * Math.sin((phi + (Math.PI / 2))));

		double[] newVecVitesse = { newVitesseX, newVitesseY };

		return newVecVitesse;
	}

	public void setZoneDep(Point zoneDep) {
		if (zoneDep != null)
			this.zoneDep = zoneDep;
	}

	public Color getCouleur() {
		return couleur;
	}

	public void setCouleur(Color pCouleur) {
		couleur = pCouleur;
	}

	public double[] getVitesse() {
		return vitesse;
	}

	public double getModuleVitesse() {
		return (double) Math.sqrt(Math.pow((double) vitesse[0], 2) + Math.pow((double) vitesse[1], 2));
	}

	public void setVitesse(double pVitesse) {
		modVitesse = pVitesse;
	}

	public void setVecVitesse() {
		vitesse[0] = Math.cos(Math.toRadians(angleDep)) * modVitesse;
		vitesse[1] = Math.sin(Math.toRadians(angleDep)) * modVitesse;
	}

	public void setVecVitesse(double pVitesse[]) {
		vitesse[0] = pVitesse[0];
		vitesse[1] = pVitesse[1];
	}

	public double getAngleDep() {
		return angleDep;
	}

	public void setAngleDep(double pAngleDep) {
		angleDep = pAngleDep;
	}

	public double getRayon() {
		return rayon;
	}

	public void setRayon(double pRayon) {
		rayon = pRayon;
	}

	public DoubleProperty getPosX() {
		return positionX;
	}

	public DoubleProperty getPosY() {
		return positionY;
	}

	public void setPosition(Point pPosition) {
		if (pPosition != null) {
			positionX.setValue(pPosition.getX());
			positionY.setValue(pPosition.getY());
		}

	}

	protected void rebond(Particule pPart) {

		setVecVitesse(calculerVitesse(pPart));
		Point pointTemp = new Point();

		pointTemp.setLocation(getPosX().getValue() + getVitesse()[0], getPosY().getValue() - getVitesse()[1]);
		setPosition(pointTemp);

	}

	public void collisionMur(boolean[] pasMur, double[] newVitesse) {
		if (pasMur[0]) {
			newVitesse[1] *= -1;
			setVecVitesse(newVitesse);
		} else {
			newVitesse[0] *= -1;
			setVecVitesse(newVitesse);
		}
	}

	public abstract void handleCollision(Particule pPart);
}
